{"version":3,"sources":["context/jobsContext.jsx","utils/constants.js","components/PrioritySelect.jsx","components/AddJobForm.jsx","utils/formValidations.js","context/modalContext.jsx","components/job-table/JobsTableRow.jsx","components/job-table/JobsTable.jsx","components/modals/EditJobModal.jsx","pages/JobsDashboard.jsx","App.js","index.js"],"names":["JobsContext","React","createContext","jobs","existingJob","editJob","deleteJob","createJob","props","useState","test1","priority","test2","test3","jobsList","setJobsList","setExistingJob","Provider","value","isJobExist","job","currentJobs","console","log","children","PRIORITIES_LIST","PrioritySelect","state","select","prevProps","prevState","reset","this","setState","className","name","id","onChange","e","target","onSelectPriority","map","p","i","key","Component","AddJobForm","formFields","errorMessage","resetSelect","jobExistErr","field","fields","validateInput","replace","preventDefault","length","onSubmitCreateJob","test","onSubmit","handleSubmit","htmlFor","type","placeholder","handleChange","ModalContext","isOpen","propsModal","setStatus","setProps","isOpenStatus","setIsOpenStatus","modalProps","setModalProps","data","JobTableRow","prop","modalSetStatus","useContext","makeSetProps","makeDelete","onClick","JobsTable","searchInputValue","setSearchInputValue","filteredList","setFilteredList","finalList","toUpperCase","result","includes","handleSearch","Object","keys","keyName","ReactModal","setAppElement","MODAL_STYLES","overlay","backgroundColor","content","top","left","right","bottom","marginRight","transform","minWidth","minHeight","padding","EditJobModal","isModalOpen","setPriority","makeEdit","style","contentLabel","handleSelect","editedJob","handleUpdate","JobsDashboard","makeCreate","Fragment","f","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0294db37.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport const JobsContext = React.createContext({\n  jobs: {},\n  existingJob: null,\n  editJob: () => {},\n  deleteJob: () => {},\n  createJob: () => {},\n});\n\nexport default (props) => {\n  const [jobsList, setJobsList] = useState({\n    test1: {\n      priority: \"Urgent\",\n    },\n    test2: {\n      priority: \"Trivial\",\n    },\n    test3: {\n      priority: \"Urgent\",\n    },\n  });\n//   const [jobsList, setJobsList] = useState({});\n  const [existingJob, setExistingJob] = useState(false);\n\n  const makeCreate = (job) => {\n    setJobsList((currentJobs) => {\n      if (currentJobs[job.job]) {\n        setExistingJob(true);\n        return currentJobs;\n      }\n      setExistingJob(false)\n      currentJobs[job.job] = { priority: job.priority };\n      let result = { ...currentJobs };\n      //   console.log(result);\n      return result;\n    });\n  };\n  const makeEdit = (job) => {\n      console.log(job)\n      setJobsList((currentJobs) => {\n          currentJobs[job.job] = {priority: job.priority};\n          let result = { ...currentJobs };\n          return result;\n      });\n  };\n  const makeDelete = (job) => {\n    setJobsList((currentJobs) => {\n      delete currentJobs[job];\n      //   console.log(job)\n      //   console.log(currentJobs)\n      let updatedJobsList = { ...currentJobs };\n      return updatedJobsList;\n    });\n  };\n\n  return (\n    <JobsContext.Provider\n      value={{\n        jobs: jobsList,\n        isJobExist: existingJob,\n        createJob: makeCreate,\n        editJob: makeEdit,\n        deleteJob: makeDelete,\n      }}\n    >\n      {props.children}\n    </JobsContext.Provider>\n  );\n};\n","const PRIORITIES_LIST = ['', 'Urgent', 'Regular', 'Trivial'];\n\nexport default PRIORITIES_LIST;\n","import React, { Component } from \"react\";\n\nimport PRIORITIES_LIST from \"../utils/constants\";\n\nclass PrioritySelect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {select: this.props.value};\n  }\n  componentDidUpdate(prevProps, prevState){\n    if(prevProps.reset !== this.props.reset){\n      this.setState({select: ''})\n    }\n    // TODO:\n    // if(this.props.reset && this.state.select !== ''){\n    //   this.setState({select: ''})\n    // }\n  }\n  render() {\n    return (\n      <div className=\"priority-select\" name=\"slot\" id=\"slot\">\n        <select\n          onChange={(e) => {\n            this.setState({select: e.target.value});\n            this.props.onSelectPriority(e);\n          }}\n          value={this.state.select}\n        >\n          {PRIORITIES_LIST.map((p, i) => (\n            <option value={p} key={i}>\n              {p}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n}\nexport default PrioritySelect;\n","import React, { Component } from \"react\";\n\nimport PrioritySelect from \"./PrioritySelect\";\n\nimport { validateInputLength } from \"../utils/formValidations\";\n\nclass AddJobForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      formFields: {\n        job: \"\",\n        priority: \"\",\n      },\n      errorMessage: \"\",\n      resetSelect: false,\n    };\n  }\n  componentDidUpdate(prevProps, prevState){\n    console.log(prevProps.jobExistErr)\n    console.log(this.props.jobExistErr)\n    if(this.props.jobExistErr && prevProps.jobExistErr !== this.props.jobExistErr){\n      this.setState({errorMessage: \"Job already exist\",  resetSelect: true})\n    }\n  }\n  handleChange(e, field) {\n    let fields = this.state.formFields;\n    fields[field] = e.target.value;\n    if (field === \"job\") {\n      this.validateInput(fields[field]);\n      fields[field] = fields[field].replace(/[^A-Za-z]/gi, \"\");\n    }\n    this.setState({ fields });\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    // console.log(this.state.formFields);\n    if (\n      this.state.formFields.job.length > 0 &&\n      this.state.formFields.priority.length > 0\n    ) {\n      this.props.onSubmitCreateJob(this.state.formFields);\n      this.setState({\n        formFields: { job: \"\", priority: \"\" },\n        errorMessage: \"\",\n        resetSelect: true\n      });\n    } else {\n      this.setState({ errorMessage: \"All fields are required\", resetSelect: false });\n    }\n  }\n  validateInput(field) {\n    if (/[^A-Za-z]/gi.test(field)) {\n      this.setState({ errorMessage: \"Only English letters are allowed\" });\n    } else {\n      this.setState({ errorMessage: \"\" });\n    }\n    if (validateInputLength(this.state.formFields.job.length)) {\n      this.setState({\n        errorMessage: \"Job name length mus be less then 70 characters\",\n      });\n    }\n  }\n  render() {\n    return (\n      <form className=\"AddJobForm\" onSubmit={(e) => this.handleSubmit(e)}>\n        <div className=\"AddJobForm__row\">\n          <label className=\"AddJobForm__label\" htmlFor=\"job\">\n            Job:\n          </label>\n          <input\n            className=\"app-standard-input\"\n            name=\"job\"\n            type=\"text\"\n            placeholder=\"Job\"\n            onChange={(e) => this.handleChange(e, \"job\")}\n            value={this.state.formFields[\"job\"]}\n          />\n        </div>\n        <div className=\"AddJobForm__row\">\n          <label className=\"AddJobForm__label\" htmlFor=\"priority\">\n            Priority:\n          </label>\n          <PrioritySelect\n            reset={this.state.resetSelect}\n            value={this.state.formFields.priority}\n            onSelectPriority={(e) => this.handleChange(e, \"priority\")}\n          />\n        </div>\n        {this.state.errorMessage ? (\n          <div className=\"AddJobForm__error-message\">\n            {this.state.errorMessage}\n          </div>\n        ) : (\n          <div className=\"AddJobForm__no-error-message\">no errors</div>\n        )}\n        <button type=\"submit\">Create</button>\n      </form>\n    );\n  }\n}\n\nexport default AddJobForm;\n","export const validateInputLength = (item, length) => {\n  const lengthToCheck = length || 70;\n  return item > lengthToCheck;\n};\n","import React, { useState } from \"react\";\n\nexport const ModalContext = React.createContext({\n  isOpen: null,\n  propsModal: {},\n  setStatus: () => {},\n  setProps: () => {},\n});\n\nexport default (props) => {\n  const [isOpenStatus, setIsOpenStatus] = useState(false);\n  const [modalProps, setModalProps] = useState({job: '', priority: ''});\n\n  const makeSetStatus = (data) => {\n    console.log(data);\n    setIsOpenStatus(() => {\n      return data;\n    });\n  };\n  const makeSetProps = (data) => {\n    setModalProps(() => {\n      return data;\n    });\n  };\n\n  return (\n    <ModalContext.Provider\n      value={{\n        isOpen: isOpenStatus,\n        propsModal: modalProps,\n        setStatus: makeSetStatus,\n        setProps: makeSetProps,\n      }}\n    >\n      {props.children}\n    </ModalContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport propTypes from \"prop-types\";\n\nimport { JobsContext } from \"../../context/jobsContext\";\nimport { ModalContext } from \"../../context/modalContext\";\n\nconst JobTableRow = (prop) => {\n  const modalSetStatus = useContext(ModalContext).setStatus;\n//   const modalProps = useContext(ModalContext).propsModal;\n  const makeSetProps = useContext(ModalContext).setProps;\n  const makeDelete = useContext(JobsContext).deleteJob;\n\n  const handleEdit = () => {\n      console.log(prop)\n    makeSetProps(prop)\n    modalSetStatus(true);\n  };\n  const handleDelete = (job) => {\n    makeDelete(job);\n  };\n  return (\n    <li className={`JobsTableRow Row${prop.priority}`}>\n      <div className=\"JobsTableRow__name\">{prop.job}</div>\n      <div className=\"JobsTableRow__priority\">{prop.priority}</div>\n      <div className=\"JobsTableRow__interactive\">\n        <button onClick={() => handleEdit()}>Edit</button>\n        <button onClick={() => handleDelete(prop.job)}>Delete</button>\n      </div>\n    </li>\n  );\n};\nJobTableRow.propTypes = {\n  priority: propTypes.string.isRequired,\n  job: propTypes.string.isRequired,\n};\n\nexport default JobTableRow;\n","import React, { useState, useContext } from \"react\";\nimport { JobsContext } from \"../../context/jobsContext\";\n\nimport JobTableRow from \"./JobsTableRow\";\n\nconst JobsTable = () => {\n  const TABLE_TITLE = \"job list\";\n\n  const jobsList = useContext(JobsContext).jobs;\n\n  const [searchInputValue, setSearchInputValue] = useState(\"\");\n  const [filteredList, setFilteredList] = useState(jobsList);\n\n  const handleSearch = (e) => {\n    let result = {};\n\n    for(let job in jobsList){\n      if (job.includes(e.target.value)) {\n        result[job] = jobsList[job];\n      }\n    }\n\n    setSearchInputValue(e.target.value);\n    setFilteredList(result);\n  };\n\n  let finalList = searchInputValue.length > 0 ? filteredList : jobsList\n  // let order = Object.keys(finalList).sort(function(a,b){return finalList[a]-finalList[b]})\n\n  return (\n    <section className=\"JobsTable\">\n      <div className=\"JobsTable__header\">\n        <div className=\"JobsTable__title\">{TABLE_TITLE.toUpperCase()}</div>\n        <div className=\"JobsTable__search-field\">\n          <input\n            className=\"app-standard-input\"\n            type=\"text\"\n            placeholder=\"Search job\"\n            onChange={(e) => handleSearch(e)}\n            value={searchInputValue}\n          />\n        </div>\n      </div>\n      <ul>\n        {finalList && Object.keys(finalList).map((keyName, i) => (\n          <JobTableRow\n            key={i + keyName}\n            job={keyName}\n            priority={finalList[keyName].priority}\n          />\n        ))}\n      </ul>\n    </section>\n  );\n  // }\n};\n\nexport default JobsTable;\n","import React, { useContext, useState } from \"react\";\nimport ReactModal from \"react-modal\";\n\nimport PrioritySelect from \"../PrioritySelect\";\n\nimport { ModalContext } from \"../../context/modalContext\";\nimport { JobsContext } from \"../../context/jobsContext\";\n\nReactModal.setAppElement(\"#root\");\n\nconst MODAL_STYLES = {\n  overlay: {\n    // position: \"fixed\",\n    // top: 0,\n    // left: 0,\n    // right: 0,\n    // bottom: 0,\n    backgroundColor: \"rgba(0, 0, 0, 0.70)\",\n  },\n  content : {\n    top                   : '50%',\n    left                  : '50%',\n    right                 : 'auto',\n    bottom                : 'auto',\n    marginRight           : '-50%',\n    transform             : 'translate(-50%, -50%)',\n    minWidth: '500px',\n    minHeight: '200px',\n    padding: '10px 20px'\n  }\n}\n\nconst EditJobModal = () => {\n\n  const isModalOpen = useContext(ModalContext).isOpen;\n  const modalProps = useContext(ModalContext).propsModal;\n  const [priority, setPriority] = useState(modalProps?.priority);\n\n  const modalSetStatus = useContext(ModalContext).setStatus;\n  const makeEdit = useContext(JobsContext).editJob;\n\n  const handleCloseModal = () => {\n    modalSetStatus(false);\n  };\n  const handleSelect = (e) => {\n    setPriority(e.target.value)\n  };\n  const handleUpdate = () => {\n    let editedJob = {...modalProps, priority: priority};\n    makeEdit(editedJob);\n    modalSetStatus(false);\n  };\n\n  return (\n    <ReactModal\n      style={MODAL_STYLES}\n      isOpen={isModalOpen}\n      contentLabel=\"Minimal Modal Example\"\n    >\n      <div className=\"EditJobModal\">\n        <div className=\"EditJobModal__close\">\n          <div className=\"EditJobModal__close-icon\" onClick={() => {handleCloseModal()}}>+</div>\n        </div>\n        <div className=\"EditJobModal__header\">\n          <h4>{modalProps.job}</h4>\n          </div>\n        <div className=\"EditJobModal__body\">\n        <PrioritySelect\n            value={modalProps.priority}\n            onSelectPriority={(e) => handleSelect(e)}\n          />\n        </div>\n        <div className=\"EditJobModal__buttons\">\n          <button onClick={() => {handleUpdate()}}>Update</button>\n        </div>\n      </div>\n    </ReactModal>\n  );\n};\n\nexport default EditJobModal;\n","import React, { useContext } from \"react\";\n// import JobsProvider from '../context/jobsContext';\n\nimport { JobsContext } from \"../context/jobsContext\";\n\nimport AddJobForm from \"../components/AddJobForm\";\nimport JobsTable from \"../components/job-table/JobsTable\";\nimport EditJobModal from \"../components/modals/EditJobModal\"\n\nconst JobsDashboard = () => {\n\n  const makeCreate = useContext(JobsContext).createJob;\n  const existingJob = useContext(JobsContext).isJobExist;\n\n  const handleSubmitCreateJob = (field) => {\n    // console.log(field);\n    // let updatedList = { ...this.state.jobsList };\n    // updatedList[field.job] = { priority: field.priority };\n    // this.setState({ jobsList: updatedList });\n    makeCreate(field);\n  };\n\n  // const { jobsList } = this.state;\n  return (\n    <React.Fragment>\n      <AddJobForm onSubmitCreateJob={(f) => handleSubmitCreateJob(f)} jobExistErr={existingJob}/>\n      <JobsTable />\n      <EditJobModal/>\n    </React.Fragment>\n  );\n};\n\nexport default JobsDashboard;\n","import React from \"react\";\n\nimport JobDashboard from \"./pages/JobsDashboard\";\n\nimport JobsProvider from \"./context/jobsContext\";\nimport ModalProvider from \"./context/modalContext\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <JobsProvider>\n        <ModalProvider>\n        <JobDashboard />\n        </ModalProvider>\n      </JobsProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker/serviceWorker';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}