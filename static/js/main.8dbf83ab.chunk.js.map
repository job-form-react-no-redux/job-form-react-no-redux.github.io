{"version":3,"sources":["utils/localStorage.js","utils/constants.js","context/jobsContext.jsx","components/PrioritySelect.jsx","components/forms/AddJobForm.jsx","utils/formValidations.js","context/modalContext.jsx","components/job-table/JobsTableRow.jsx","components/job-table/JobsTable.jsx","components/modals/EditJobModal.jsx","pages/JobsDashboard.jsx","App.js","index.js"],"names":["saveJobsList","data","localStorage","setItem","JSON","stringify","PRIORITIES_LIST","JobsContext","React","createContext","jobs","existingJob","editJob","deleteJob","createJob","props","useState","savedList","list","getItem","parse","getJobsList","priority","jobsList","setJobsList","setExistingJob","makeDelete","j","currentJobs","indexToDelete","indexOf","job","splice","updatedJobsList","Provider","value","isJobExist","includes","unshift","result","newPriority","children","PrioritySelect","prop","select","setSelect","useEffect","reset","className","name","id","onChange","e","target","onSelectPriority","map","p","i","key","AddJobForm","state","formFields","errorMessage","resetSelect","prevProps","prevState","this","jobExistErr","setState","field","fields","validateInput","replace","preventDefault","length","onSubmitCreateJob","test","console","log","onSubmit","handleSubmit","htmlFor","type","placeholder","handleChange","Component","ModalContext","isOpen","propsModal","setStatus","setProps","isOpenStatus","setIsOpenStatus","modalProps","setModalProps","JobTableRow","modalSetStatus","useContext","makeSetProps","onClick","JobsTable","searchInputValue","setSearchInputValue","filteredList","setFilteredList","finalList","toUpperCase","push","handleSearch","Object","keys","ReactModal","setAppElement","MODAL_STYLES","overlay","backgroundColor","content","top","left","right","bottom","marginRight","transform","minWidth","minHeight","padding","EditJobModal","isModalOpen","setPriority","makeEdit","style","contentLabel","handleSelect","editedJob","handleUpdate","JobsDashboard","makeCreate","Fragment","f","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dbf83ab.chunk.js","sourcesContent":["export const saveJobsList = (data) => {\n  localStorage.setItem(\"JOBS_LIST\", JSON.stringify(data));\n};\nexport const getJobsList = () => {\n  let list = localStorage.getItem(\"JOBS_LIST\");\n  return JSON.parse(list);\n};\n","const PRIORITIES_LIST = ['Urgent', 'Regular', 'Trivial'];\n\nexport default PRIORITIES_LIST;\n","import React, { useState } from \"react\";\n\nimport { saveJobsList, getJobsList } from \"../utils/localStorage\";\nimport PRIORITIES_LIST from \"../utils/constants\";\n\nexport const JobsContext = React.createContext({\n  jobs: {},\n  existingJob: null,\n  editJob: () => {},\n  deleteJob: () => {},\n  createJob: () => {},\n});\n\nexport default (props) => {\n  const [jobsList, setJobsList] = useState(() => {\n    let savedList = getJobsList();\n    let jobs = {};\n    if(savedList){\n      jobs = savedList\n    }else{\n      for (let priority in PRIORITIES_LIST) {\n        jobs[PRIORITIES_LIST[priority]] = [];\n      }\n    }\n    return jobs;\n  });\n\n  const [existingJob, setExistingJob] = useState(false);\n\n  const makeCreate = (j) => {\n    setJobsList((currentJobs) => {\n      for (let priority in currentJobs) {\n        if (currentJobs[priority].includes(j.job)) {\n          setExistingJob(true);\n          return currentJobs;\n        }\n      }\n      setExistingJob(false);\n      currentJobs[j.priority].unshift(j.job);\n      let result = { ...currentJobs };\n      saveJobsList(result);\n      return result;\n    });\n  };\n  const makeEdit = (j) => {\n    setJobsList((currentJobs) => {\n    currentJobs[j.newPriority].unshift(j.job);\n    makeDelete({job: j.job, priority: j.priority})\n    });\n  };\n  const makeDelete = (j) => {\n    setJobsList((currentJobs) => {\n      let indexToDelete = currentJobs[j.priority].indexOf(j.job);\n      if (indexToDelete >= 0) {\n        currentJobs[j.priority].splice(indexToDelete, 1);\n      }\n      let updatedJobsList = { ...currentJobs };\n      saveJobsList(updatedJobsList);\n      return updatedJobsList;\n    });\n  };\n\n  return (\n    <JobsContext.Provider\n      value={{\n        jobs: jobsList,\n        isJobExist: existingJob,\n        createJob: makeCreate,\n        editJob: makeEdit,\n        deleteJob: makeDelete,\n      }}\n    >\n      {props.children}\n    </JobsContext.Provider>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport propTypes from \"prop-types\";\n\nimport PRIORITIES_LIST from \"../utils/constants\";\n\nconst PrioritySelect = (prop) => {\n  const [select, setSelect] = useState(prop.value);\n\n  useEffect(() => {\n    if(prop.reset){\n      setSelect('');\n    }\n  }, [prop.reset]);\n\n  return (\n    <div className=\"priority-select\" name=\"slot\" id=\"slot\">\n      <select\n        onChange={(e) => {\n          setSelect(e.target.value);\n          prop.onSelectPriority(e);\n        }}\n        value={select}\n      >\n        <option value=\"\"></option>\n        {PRIORITIES_LIST.map((p, i) => (\n          <option value={p} key={i}>\n            {p}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n};\nPrioritySelect.propTypes = {\n  value: propTypes.string,\n  reset: propTypes.bool,\n  onSelectPriority: propTypes.func.isRequired,\n};\n\nexport default PrioritySelect;\n","import React, { Component } from \"react\";\n\nimport PrioritySelect from \"../PrioritySelect\";\n\nimport { validateInputLength } from \"../../utils/formValidations\";\n\nclass AddJobForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      formFields: {\n        job: \"\",\n        priority: \"\",\n      },\n      errorMessage: \"\",\n      resetSelect: false,\n    };\n  }\n  componentDidUpdate(prevProps, prevState){\n    if(this.props.jobExistErr && this.state.errorMessage === \"\"){\n      this.setState({errorMessage: \"Job already exist\"})\n    }\n  }\n  handleChange(e, field) {\n    let fields = this.state.formFields;\n    fields[field] = e.target.value;\n    if (field === \"job\") {\n      this.validateInput(fields[field]);\n      fields[field] = fields[field].replace(/[^A-Za-z]/gi, \"\");\n    }\n    if(this.state.errorMessage === \"Job already exist\"){\n      this.setState({ errorMessage: \"\" });\n    }\n    this.setState({ fields, resetSelect: false });\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    if (\n      this.state.formFields.job.length > 0 &&\n      this.state.formFields.priority.length > 0\n    ) {\n      this.props.onSubmitCreateJob(this.state.formFields);\n      \n      this.setState({\n        formFields: { job: \"\", priority: \"\" },\n        errorMessage: \"\",\n        resetSelect: true\n      });\n    } else {\n      this.setState({ errorMessage: \"All fields are required\", resetSelect: false });\n    }\n  }\n  validateInput(field) {\n    if (/[^A-Za-z]/gi.test(field)) {\n      this.setState({ errorMessage: \"Only English letters are allowed\" });\n    } else if (validateInputLength(this.state.formFields.job.length)) {\n      this.setState({\n        errorMessage: \"Job name length mus be less then 70 characters\",\n      });\n    } else {\n      this.setState({ errorMessage: \"\" });\n    }\n  }\n  render() {\n    console.log(this.state.errorMessage)\n    return (\n      <form className=\"AddJobForm\" onSubmit={(e) => this.handleSubmit(e)}>\n        <div className=\"AddJobForm__row\">\n          <label className=\"AddJobForm__label\" htmlFor=\"job\">\n            Job:\n          </label>\n          <input\n            className=\"app-standard-input\"\n            name=\"job\"\n            type=\"text\"\n            placeholder=\"Job\"\n            onChange={(e) => this.handleChange(e, \"job\")}\n            value={this.state.formFields[\"job\"]}\n          />\n        </div>\n        <div className=\"AddJobForm__row\">\n          <label className=\"AddJobForm__label\" htmlFor=\"priority\">\n            Priority:\n          </label>\n          <PrioritySelect\n            reset={this.state.resetSelect}\n            onSelectPriority={(e) => this.handleChange(e, \"priority\")}\n          />\n        </div>\n        {this.state.errorMessage ? (\n          <div className=\"AddJobForm__error-message\">\n            {this.state.errorMessage}\n          </div>\n        ) : (\n          <div className=\"AddJobForm__no-error-message\">no errors</div>\n        )}\n        <button type=\"submit\">Create</button>\n      </form>\n    );\n  }\n}\n\nexport default AddJobForm;\n","export const validateInputLength = (item, length) => {\n  const lengthToCheck = length || 70;\n  return item > lengthToCheck;\n};\n","import React, { useState } from \"react\";\n\nexport const ModalContext = React.createContext({\n  isOpen: null,\n  propsModal: {},\n  setStatus: () => {},\n  setProps: () => {},\n});\n\nexport default (props) => {\n  const [isOpenStatus, setIsOpenStatus] = useState(false);\n  const [modalProps, setModalProps] = useState({job: '', priority: ''});\n\n  const makeSetStatus = (data) => {\n    setIsOpenStatus(() => {\n      return data;\n    });\n  };\n  const makeSetProps = (data) => {\n    setModalProps(() => {\n      return data;\n    });\n  };\n\n  return (\n    <ModalContext.Provider\n      value={{\n        isOpen: isOpenStatus,\n        propsModal: modalProps,\n        setStatus: makeSetStatus,\n        setProps: makeSetProps,\n      }}\n    >\n      {props.children}\n    </ModalContext.Provider>\n  );\n};\n","import React, { useContext } from \"react\";\nimport propTypes from \"prop-types\";\n\nimport { JobsContext } from \"../../context/jobsContext\";\nimport { ModalContext } from \"../../context/modalContext\";\n\nconst JobTableRow = (prop) => {\n  const modalSetStatus = useContext(ModalContext).setStatus;\n  const makeSetProps = useContext(ModalContext).setProps;\n  const makeDelete = useContext(JobsContext).deleteJob;\n\n  const handleEdit = () => {\n    makeSetProps(prop);\n    modalSetStatus(true);\n  };\n  const handleDelete = (job) => {\n    makeDelete(job);\n  };\n\n  return (\n    <li className={`JobsTableRow Row${prop.priority}`}>\n      <div className=\"JobsTableRow__name\">{prop.job}</div>\n      <div className=\"JobsTableRow__priority\">{prop.priority}</div>\n      <div className=\"JobsTableRow__interactive\">\n        <button onClick={() => handleEdit()}>Edit</button>\n        <button onClick={() => handleDelete(prop)}>Delete</button>\n      </div>\n    </li>\n  );\n};\nJobTableRow.propTypes = {\n  priority: propTypes.string.isRequired,\n  job: propTypes.string.isRequired,\n};\n\nexport default JobTableRow;\n","import React, { useState, useContext } from \"react\";\nimport { JobsContext } from \"../../context/jobsContext\";\n\nimport JobTableRow from \"./JobsTableRow\";\n\nconst TABLE_TITLE = \"job list\";\n\nconst JobsTable = () => {\n  const jobsList = useContext(JobsContext).jobs;\n\n  const [searchInputValue, setSearchInputValue] = useState(\"\");\n  const [filteredList, setFilteredList] = useState(jobsList);\n\n  const handleSearch = (e) => {\n    let result = {};\n    for (let priority in jobsList) {\n      result[priority] = [];\n      for (let job in jobsList[priority]) {\n        if (jobsList[priority][job].includes(e.target.value)) {\n          result[priority].push(jobsList[priority][job]);\n        }\n      }\n    }\n    setSearchInputValue(e.target.value);\n    setFilteredList(result);\n  };\n\n  let finalList = searchInputValue.length > 0 ? filteredList : jobsList;\n\n  return (\n    <section className=\"JobsTable\">\n      <div className=\"JobsTable__header\">\n        <div className=\"JobsTable__title\">{TABLE_TITLE.toUpperCase()}</div>\n        <div className=\"JobsTable__search-field\">\n          <input\n            className=\"app-standard-input\"\n            type=\"text\"\n            placeholder=\"Search job\"\n            onChange={(e) => handleSearch(e)}\n            value={searchInputValue}\n          />\n        </div>\n      </div>\n      <ul>\n        {finalList &&\n          Object.keys(finalList).map((priority) =>\n            finalList[priority].map((job, i) => (\n              <JobTableRow key={i + job} job={job} priority={priority} />\n            ))\n          )}\n      </ul>\n    </section>\n  );\n};\n\nexport default JobsTable;\n","import React, { useContext, useState } from \"react\";\nimport ReactModal from \"react-modal\";\n\nimport PrioritySelect from \"../PrioritySelect\";\n\nimport { ModalContext } from \"../../context/modalContext\";\nimport { JobsContext } from \"../../context/jobsContext\";\n\nReactModal.setAppElement(\"#root\");\n\nconst MODAL_STYLES = {\n  overlay: {\n    backgroundColor: \"rgba(0, 0, 0, 0.70)\",\n  },\n  content: {\n    top: \"50%\",\n    left: \"50%\",\n    right: \"auto\",\n    bottom: \"auto\",\n    marginRight: \"-50%\",\n    transform: \"translate(-50%, -50%)\",\n    minWidth: \"500px\",\n    minHeight: \"200px\",\n    padding: \"10px 20px\",\n  },\n};\n\nconst EditJobModal = () => {\n  const isModalOpen = useContext(ModalContext).isOpen;\n  const modalProps = useContext(ModalContext).propsModal;\n\n  const [priority, setPriority] = useState(modalProps?.priority);\n\n  const modalSetStatus = useContext(ModalContext).setStatus;\n  const makeEdit = useContext(JobsContext).editJob;\n\n  const handleCloseModal = () => {\n    modalSetStatus(false);\n  };\n  const handleSelect = (e) => {\n    setPriority(e.target.value)\n  };\n  const handleUpdate = () => {\n    let editedJob = {...modalProps, newPriority: priority};\n    makeEdit(editedJob);\n    modalSetStatus(false);\n  };\n\n  return (\n    <ReactModal\n      style={MODAL_STYLES}\n      isOpen={isModalOpen}\n      contentLabel=\"Minimal Modal Example\"\n    >\n      <div className=\"EditJobModal\">\n        <div className=\"EditJobModal__close\">\n          <div className=\"EditJobModal__close-icon\" onClick={() => {handleCloseModal()}}>+</div>\n        </div>\n        <div className=\"EditJobModal__header\">\n          <h4>{modalProps.job}</h4>\n        </div>\n        <div className=\"EditJobModal__body\">\n        <PrioritySelect\n            reset={false}\n            value={modalProps.priority}\n            onSelectPriority={(e) => handleSelect(e)}\n          />\n        </div>\n        <div className=\"EditJobModal__buttons\">\n          <button onClick={() => {handleUpdate()}}>Update</button>\n        </div>\n      </div>\n    </ReactModal>\n  );\n};\n\nexport default EditJobModal;\n","import React, { useContext } from \"react\";\n\nimport { JobsContext } from \"../context/jobsContext\";\n\nimport AddJobForm from \"../components/forms/AddJobForm\";\nimport JobsTable from \"../components/job-table/JobsTable\";\nimport EditJobModal from \"../components/modals/EditJobModal\"\n\nconst JobsDashboard = () => {\n  const existingJob = useContext(JobsContext).isJobExist;\n  \n  const makeCreate = useContext(JobsContext).createJob;\n\n  const handleSubmitCreateJob = (field) => {\n    makeCreate(field);\n  };\n\n  return (\n    <React.Fragment>\n      <AddJobForm onSubmitCreateJob={(f) => handleSubmitCreateJob(f)} jobExistErr={existingJob}/>\n      <JobsTable />\n      <EditJobModal/>\n    </React.Fragment>\n  );\n};\n\nexport default JobsDashboard;\n","import React from \"react\";\n\nimport JobDashboard from \"./pages/JobsDashboard\";\nimport JobsProvider from \"./context/jobsContext\";\nimport ModalProvider from \"./context/modalContext\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <JobsProvider>\n        <ModalProvider>\n        <JobDashboard />\n        </ModalProvider>\n      </JobsProvider>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker/serviceWorker';\n\nimport './styles/index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}